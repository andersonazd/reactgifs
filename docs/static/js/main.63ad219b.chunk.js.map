{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAYaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAmB5C,OAEI,0BAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAQlB,2BACAO,KAAK,OACLC,MAAQT,EACRU,SArBsB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCjBlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAiBZM,GAjBY,4CAAH,sDCKPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIhC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACxB,2BAAIA,KCHCO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECNX,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAuBtC,OAhBDC,qBAAU,WAETxB,EAAQC,GACPwB,MAAM,SAAAC,GAECH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAMnB,CAACpB,IAGIqB,EDbwBK,CAAa1B,GAAhCa,EAJuB,EAI5BN,KAAaa,EAJe,EAIfA,QAEpB,OACI,oCACA,wBAAIJ,UAAU,qCAAd,IAAoDhB,EAApD,KAGCoB,GAAW,uBAAGJ,UAAU,qCAAb,WAEZ,yBAAKA,UAAU,aAGHH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACAiB,IAAKjB,EAAIC,IACLD,UEQbkB,EAzBM,WAAO,IAAD,EAEa1C,mBAAS,CAAC,gBAFvB,mBAEhB2C,EAFgB,KAEJ5C,EAFI,KAKvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEI4C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACA2B,IAAK3B,EACLA,SAAUA,UCtB9B8B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.63ad219b.chunk.js","sourcesContent":["//como funciona esta parte: desde el componente principal GifExpertApp se requiere obtener el set para el hook\n//que tendrá y mostrará las categorías en el home, entonces se crea otro componente que tendrá el form para tomar\n//esos datos. Desde GifExpertApp se llama el componente AddCategory y se le manda el set que funciona tanto para \n//enviar la función como para recibir los datos procesados. en este componente se obtiene el set por medio de \n//setCategories en el () de la const AddCategory y se procede a crear el formulario. este formulario tiene un solo input, a este se le da el valor de \n//inputValue, es de tipo text y en onChange handleInputChange para que vaya registrando el evento de cuando se ingresa\n//cada palabra, despues en el formulario se le da el onSubmit para que una vez se dé enter, tome el evento y guarde \n//la data de inputValue en un array llamado cats que será enviado a GifExpertApp por medio del setCategories\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2){\n            \n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n\n    }\n\n    return (\n\n        <form onSubmit={ handleSubmit }>\n        <input \n        type=\"text\"\n        value={ inputValue}\n        onChange={ handleInputChange }\n        />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=6vnUQQuRVnknB01ikRpP4XfH3frxgG48`\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map(img =>{\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n\n        }\n\n        \n\n    })\n\n    return gifs;\n}","//como funciona: se trae el title y la url que estaban en el array categoria desde el componente GifGrid y se plasman\n//en un div card\n\nimport React from 'react'\n\nexport const GifGridItem = ({title, url}) => {\n\n    // console.log(title, url);\n\n    return (\n        <div className=\"card animate__animated animate__zoomIn\">\n            <img src={url} alt={title}/>\n        <p>{title}</p>\n        </div>\n    )\n}\n","//como funciona: el componente recibe un array con los datos de las categorias a mostrar en el GifGrid , está separada en\n//un componente que creará un map con la cantidad de imagenes del array category y que mostrará esa cantidad de veces el \n// componente GifGridItem y un custom hook que procesa las imagenes y la pantalla de carga. En el componente llamado\n//GifGridItem se envía una key y el array con los datos de las imagenes previamente procesatos en el custom hook.\n\nimport React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n\n    //custom hook\n    const {data:images, loading} = useFetchGifs(category);\n\n    return (\n        <>\n        <h3 className=\"animate__animated animate__zoomIn\"> {category } </h3>\n\n        {/* {loading ? <p>loading</p> : null} */}\n        {loading && <p className=\"animate__animated animate__zoomIn\">Loading</p>}\n        \n        <div className=\"card-grid\">\n         \n                {\n                    images.map( img => (\n                        <GifGridItem \n                        key={img.id}\n                        {...img}\n                        />\n                    ))\n                }\n          \n        </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/GetGifs\";\n\nexport const useFetchGifs = (category) => {\n \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n   useEffect(() => {\n   \n    getGifs(category)\n    .then( imgs => {\n\n            setState({\n                data: imgs,\n                loading: false\n            })\n      \n    })\n\n\n   }, [category])\n\n\n    return state;\n\n}\n","//como funciona: se crea un componente llamado GifExpertApp que tendrá dentro un componente para crear\n//una categoria y otro componente para mostrar imagenes dependiendo de las categorías. Se crea entonces un\n//hook state que tenga una categoría para mostrar y que obtenga más por medio del componente AddCateogry, mandandole la \n//función setCategories y esperando un array con las nuevas categorias a mostrar.\n//en el componente para mostrar las categorías, se le envía al componente GifGrid una key con id para identificar los items\n// de este y un array con los datos de la categoria este devuelve un array con los datos procesados y mostrandose.\n\nimport React, {useState} from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Dragon Ball']);\n\n \n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories}/>\n            <hr />\n            \n            <ol>\n                {\n                categories.map( category =>(\n                    <GifGrid \n                    key={category}\n                    category={category}/>\n                ))\n                }\n            </ol>\n\n        </>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}